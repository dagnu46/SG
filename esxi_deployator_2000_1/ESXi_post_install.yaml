## Set varaibles from csv input
  - name: "VARIABLE"
    set_fact:
      esxi_hostname: "{{ esxitodeploy.value.Hostname }}"
      Customer: "{{ esxitodeploy.value.Customer }}"
      IP_vmKernel: "{{ esxitodeploy.value.IP_vmKernel }}"
      vmKernel_netmask: "{{ esxitodeploy.value.vmKernel_netmask }}"
      vmKernel_gateway: "{{ esxitodeploy.value.vmKernel_gateway }}"
      vlan_vmKernel: "{{ esxitodeploy.value.vlan_vmKernel }}"
      IP_vMotion: "{{ esxitodeploy.value.IP_vMotion }}"
      vMotion_netmask: "{{ esxitodeploy.value.vMotion_netmask }}"
      vlan_vMotion: "{{ esxitodeploy.value.vlan_vMotion }}"
      vMotion_vDS: "{{ esxitodeploy.value.vMotion_vDS }}"
      vMotion_dvPG: "{{ esxitodeploy.value.vMotion_dvPG }}"
      IP_NFS1: "{{ esxitodeploy.value.IP_NFS1 }}"
      NFS1_netmask: "{{ esxitodeploy.value.NFS1_netmask }}"
      IP_NFS2: "{{ esxitodeploy.value.IP_NFS2 }}"
      NFS2_netmask: "{{ esxitodeploy.value.NFS2_netmask }}"
      ipmi_ip: "{{ esxitodeploy.value.IP_IPMI_DRAC }}"<p style="background-image: url('img_girl.jpg');">

      HW_Vendor: "{{ esxitodeploy.value.HW_Vendor }}"
      ipmi_user: "{{ esxitodeploy.value.ipmi_user }}"
      vCenter: "{{ esxitodeploy.value.vCenter }}"
      Cluster: "{{ esxitodeploy.value.Cluster }}"
      Datacenter: "{{ esxitodeploy.value.Datacenter }}"
      # vcenter_username: "{{ esxitodeploy.value.vcenter_username }}"
      # vcenter_password: "{{ esxitodeploy.value.vcenter_password }}"
      # ntp: "{{ esxitodeploy.value.ntp }}"
      # dns: "{{ esxitodeploy.value.dns1 }},{{ esxitodeploy.value.dns2 }}"
      # ipmi_password: "{{ esxitodeploy.value.ipmi_password }}"   
      rootesxi: 'root'

  - name: "get administrator@vsphere.local password from MyVault"
    ansible_module_myvault:
      myvault_pathname: 'kv_vps/data/[tailored] [all] [all] [fr] [paris] [vmware] [vcenter sso] [administrator@vsphere.local] [all]'
      myvault_user: 'administrator@vsphere.local'
    register: admin_vsphere_local_vault_password
  - debug: var=admin_vsphere_local_vault_password.resultt 

  - name: "get root password from MyVault"
    ansible_module_myvault:
      myvault_pathname: 'kv_vps/data/[dws] [all] [prd] [fr] [paris] [vmware] [esx] [root] [host]'
      myvault_user: 'root'
    register: esxi_vault_password
  - debug: var=esxi_vault_password.resultt

  # - name: "ESXi enter maintenance"
  #   register: status
  #   vmware_maintenancemode:
  #     hostname: "{{ vCenter }}"
  #     username: administrator@vsphere.local
  #     password: "{{ admin_vsphere_local_vault_password.resultt }}"
  #     esxi_hostname: "{{ esxi_hostname }}"
  #     evacuate: yes
  #     validate_certs: no
  #     timeout: 3600
  #     state: present
  #   delegate_to: localhost
  # - debug: var=status.msg

  # - name: Sleeping 1 minutes before adding to vc   
  #   pause:
  #     minutes: 2

  # - name: "change root password"
  #   community.vmware.vmware_local_user_manager:
  #     hostname: "{{ esxi_hostname }}"
  #     username: 'root'
  #     password: "{{ esxipassword }}"
  #     local_user_name: 'root'
  #     local_user_password: "{{ esxi_vault_password.resultt }}"
  #     state: present
  #     validate_certs: no
  #   no_log: False
  #   register: result_change_passwd
  # - debug: var=result_change_passwd  

  # - name: "Search for existing VIB installation"
  #   shell: ssh root@{{ esxi_hostname }} "esxcli software vib list | egrep -i 'netapp|ams'"
  #   register: vibs
  #   changed_when: false
  #   ignore_errors: yes
  #   run_once: true
  #   delegate_to: localhost
  # - debug: var=vibs.stdout

  # - name: "Copy NetApp VIB to ESXI Host"
  #   shell: ssh root@{{ esxi_hostname }} "wget http://srvparvmmp44.fr.world.socgen/vmware/vib/netapp/VAAI%20vSphere%207.0U1/NetAppNasPluginV2.0.zip -O /tmp/NetAppNasPluginV2.0.zip"
  #   register: vibcopy
  # - debug: var=vibcopy

  # - name: "Install NetApp VIB"
  #   shell: ssh root@{{ esxi_hostname }} "esxcli software vib install -n NetAppNasPlugin -d file:///tmp/NetAppNasPluginV2.0.zip"
  #   register: vibinstall
  # - debug: var=vibinstall

  # - name: "Copy AMS VIB to ESXI Host"
  #   shell: ssh root@{{ esxi_hostname }} "wget http://srvparvmmp44.fr.world.socgen/vmware/vib/ams/7.0/amsdComponent_701.11.7.2.4-1_17974261.zip -O /tmp/amsdComponent_701.11.7.2.4-1_17974261.zip"
  #   register: vibcopy
  #   when: HW_Vendor == 'HP'
  # - debug: var=vibcopy

  # - name: "Install AMS VIB"
  #   shell: ssh root@{{ esxi_hostname }} "esxcli software vib install -d file:///tmp/amsdComponent_701.11.7.2.4-1_17974261.zip -f"
  #   register: vibinstall
  #   when: HW_Vendor == 'HP'
  # - debug: var=vibinstall

  # - name: Adding ESXi host "{{ esxi_hostname }}" to vCenter . . .
  #   vmware_host:
  #     hostname: "{{ vCenter }}"
  #     username: administrator@vsphere.local
  #     password: "{{ esxi_vault_password.resultt }}"
  #     datacenter_name: 'PANTIN'
  #     cluster_name: "{{ Cluster }}"
  #     esxi_hostname: "{{ esxi_hostname }}"
  #     esxi_username: "{{ rootesxi }}"
  #     esxi_password: "{{ esxipassword }}"
  #     state: present
  #     validate_certs: false
  #   delegate_to: localhost

  # - name: "ESXi reboot"
  #   vmware_host_powerstate: 
  #     hostname: "{{ vCenter }}"
  #     username: administrator@vsphere.local
  #     password: "{{ admin_vsphere_local_vault_password.resultt }}"
  #     esxi_hostname: "{{ esxi_hostname }}"
  #     validate_certs: no
  #     timeout: 3600
  #     state: reboot-host
  #   delegate_to: localhost
  #   register: reboot_host
  # - debug: var=reboot_host.msg  
    
  # - name: "ESXi wait for the reboot to complete"
  #   wait_for:
  #     host: "{{ esxi_hostname }}"
  #     port: 443
  #     delay: 360
  #     state: started
  #     timeout: 3600
  #   delegate_to: localhost
  # - debug: var=status.msg  

  # - name: "ESXi exit maintenance"
  #   register: status
  #   vmware_maintenancemode:
  #     hostname: "{{ vCenter }}"
  #     username: administrator@vsphere.local
  #     password: "{{ admin_vsphere_local_vault_password.resultt }}"
  #     esxi_hostname: "{{ esxi_hostname }}"
  #     evacuate: yes
  #     validate_certs: no
  #     timeout: 3600
  #     state: absent
  #   delegate_to: localhost
  # - debug: var=status.msg

  # - name: Add vMotion vmkernel port with vMotion TCP/IP stack
  #   community.vmware.vmware_vmkernel:
  #     hostname: "{{ vCenter }}"
  #     username: administrator@vsphere.local
  #     password: "{{ admin_vsphere_local_vault_password.resultt }}"
  #     esxi_hostname: "{{ esxi_hostname }}"
  #     validate_certs: no
  #     dvswitch_name: "{{ vMotion_vDS }}"
  #     portgroup_name: "{{ vMotion_dvPG }}"
  #     network:
  #       type: 'static'
  #       ip_address: "{{ IP_vMotion }}"
  #       subnet_mask: "{{ vMotion_netmask }}"
  #       tcpip_stack: vmotion
  #     state: present
  #   delegate_to: localhost

  # - name: Configure NTP - GCR
  #   community.vmware.vmware_host_ntp:
  #     hostname: "{{ vCenter }}"
  #     username: administrator@vsphere.local
  #     password: "{{ admin_vsphere_local_vault_password.resultt }}"
  #     esxi_hostname: "{{ esxi_hostname }}"
  #     validate_certs: no
  #     ntp_servers:
  #       - tudor.fr.world.socgen
  #       - jaeger.fr.world.socgen
  #       - dewitt.fr.world.socgen
  #       - tissot.fr.world.socgen
  #       - longines.fr.world.socgen
  #   when: Customer == 'GCR'
  #   delegate_to: localhost

  # - name: Configure NTP - RCR
  #   community.vmware.vmware_host_ntp:
  #     hostname: "{{ vCenter }}"
  #     username: administrator@vsphere.local
  #     password: "{{ admin_vsphere_local_vault_password.resultt }}"
  #     esxi_hostname: "{{ esxi_hostname }}"
  #     validate_certs: no
  #     ntp_servers:
  #       - prftps02.dns22.socgen
  #       - prftps202.dns20.socgen
  #       - brftps02.dns22.socgen
  #       - pntplx01.dns20-1.socgen
  #       - pntplx02.dns20-3.socgen
  #       - pntplx03.dns20-2.socgen
  #   when: Customer == 'RCR'
  #   delegate_to: localhost

  - name: Configure DNS for an ESXi host
    community.vmware.vmware_host_dns:
      hostname: "{{ vCenter }}"
      username: administrator@vsphere.local
      password: "{{ admin_vsphere_local_vault_password.resultt }}"
      esxi_hostname: "{{ esxi_hostname }}"
      type: static
      domain: fr.world.socgen
      dns_servers:
        - 192.80.229.111
        - 192.64.229.111
        - 192.32.207.163
      search_domains:
        - fr.world.socgen
      validate_certs: no
    delegate_to: localhost
    when: Customer == 'RCR' and Datacenter == 'seclin'

  - name: Configure DNS for an ESXi host
    community.vmware.vmware_host_dns:
      hostname: "{{ vCenter }}"
      username: administrator@vsphere.local
      password: "{{ admin_vsphere_local_vault_password.resultt }}"
      esxi_hostname: "{{ esxi_hostname }}"
      type: static
      domain: fr.world.socgen
      dns_servers:
        - 192.16.207.80
        - 161.12.129.1
        - 192.80.229.111
      search_domains:
        - fr.world.socgen
      validate_certs: no
    delegate_to: localhost
    when: Customer == 'RCR' and Datacenter == 'marcoussis'

  - name: Configure DNS for an ESXi host
    community.vmware.vmware_host_dns:
      hostname: "{{ vCenter }}"
      username: administrator@vsphere.local
      password: "{{ admin_vsphere_local_vault_password.resultt }}"
      esxi_hostname: "{{ esxi_hostname }}"
      type: static
      domain: fr.world.socgen
      dns_servers:
        - 175.128.201.71
        - 184.17.1.169
        - 184.7.12.44
      search_domains:
        - fr.world.socgen
      validate_certs: no
    delegate_to: localhost
    when: Customer == 'GCR' and Datacenter == 'seclin'

  - name: Configure DNS for an ESXi host
    community.vmware.vmware_host_dns:
      hostname: "{{ vCenter }}"
      username: administrator@vsphere.local
      password: "{{ admin_vsphere_local_vault_password.resultt }}"
      esxi_hostname: "{{ esxi_hostname }}"
      type: static
      domain: fr.world.socgen
      dns_servers:
        - 184.122.32.16
        - 184.12.21.17
        - 184.10.23.17
      search_domains:
        - fr.world.socgen
      validate_certs: no
    delegate_to: localhost
    when: Customer == 'GCR' and Datacenter == 'marcoussis'