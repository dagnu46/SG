## Set varaibles from csv input
  - name: "VARIABLE"
    set_fact:
      esxi_hostname: "{{ esxitodeploy.value.Hostname }}"
      Customer: "{{ esxitodeploy.value.Customer }}"
      IP_vmKernel: "{{ esxitodeploy.value.IP_vmKernel }}"
      vmKernel_netmask: "{{ esxitodeploy.value.vmKernel_netmask }}"
      vmKernel_gateway: "{{ esxitodeploy.value.vmKernel_gateway }}"
      vlan_vmKernel: "{{ esxitodeploy.value.vlan_vmKernel }}"
      IP_vMotion: "{{ esxitodeploy.value.IP_vMotion }}"
      vMotion_netmask: "{{ esxitodeploy.value.vMotion_netmask }}"
      vlan_vMotion: "{{ esxitodeploy.value.vlan_vMotion }}"
      vMotion_vDS: "{{ esxitodeploy.value.vMotion_vDS }}"
      vMotion_dvPG: "{{ esxitodeploy.value.vMotion_dvPG }}"
      IP_NFS1: "{{ esxitodeploy.value.IP_NFS1 }}"
      NFS1_netmask: "{{ esxitodeploy.value.NFS1_netmask }}"
      IP_NFS2: "{{ esxitodeploy.value.IP_NFS2 }}"
      NFS2_netmask: "{{ esxitodeploy.value.NFS2_netmask }}"
      ipmi_ip: "{{ esxitodeploy.value.IP_IPMI_DRAC }}"
      HW_Vendor: "{{ esxitodeploy.value.HW_Vendor }}"
      ipmi_user: "{{ esxitodeploy.value.ipmi_user }}"
      vCenter: "{{ esxitodeploy.value.vCenter }}"
      Cluster: "{{ esxitodeploy.value.Cluster }}"
      Datacenter: "{{ esxitodeploy.value.Datacenter }}"
      # vcenter_username: "{{ esxitodeploy.value.vcenter_username }}"
      # vcenter_password: "{{ esxitodeploy.value.vcenter_password }}"
      # ntp: "{{ esxitodeploy.value.ntp }}"
      dns: "{{ esxitodeploy.value.dns1 }},{{ esxitodeploy.value.dns2 }}"
      # ipmi_password: "{{ esxitodeploy.value.ipmi_password }}"   
      dns: "{{ esxitodeploy.value.dns1 }}"
      ipmi_vault_passwd: 'YtRXYqui'
      rootesxi: 'root'
      esxi_vault_password: 'Rootroot!!1234'


## Backup ESXi Configuration
  # - name: Save the ESXi configuration locally by authenticating directly against the ESXi host
  #   vmware_cfg_backup:
  #     dest: /tmp/ 
  #     hostname: '{{ esxi_hostname }}'      
  #     username: '{{ esxi_username }}'
  #     password: '{{ esxi_password }}'
  #     state: saved
  #     validate_certs: false
  #   delegate_to: localhost


  - name: Purge (in case of previous failure) Deleting all related files from staging location and web server
    shell: |
      warn: false
      umount /mnt/{{ esxi_hostname }}     
      rm -rf {{ esxi_hostname }}
      rm -rf {{ global_path }}/baremetal/temp/{{ esxi_hostname }}
      rm -rf {{ global_path }}/baremetal/{{ esxi_hostname }}
      rm -f {{ global_path }}/iso/{{ esxi_hostname }}.iso
      rm -rf /temp/{{ esxi_hostname }}
      rm -rf /mnt/{{ esxi_hostname }}
    args:
      chdir: '{{ global_path }}'
    ignore_errors: True
  

## {{ global_path }}/baremetal is the staging directory.
  - name: Mounting source directory from official production ESXi ISO . . . copying over build files . . . backing up defaults . . .
    shell: |
        warn: false
        mkdir /mnt/{{ esxi_hostname }}
        mount -o loop -t iso9660 {{ global_path }}/esxiisosrc/{{ HW_Vendor }}/*.iso /mnt/{{ esxi_hostname }}/
        mkdir {{ global_path }}/baremetal/{{ esxi_hostname }}
        mkdir {{ global_path }}/baremetal/temp/{{ esxi_hostname }}
        mkdir -p {{ global_path }}/baremetal/temp/{{ esxi_hostname }}/etc/vmware/weasel
        cp -r /mnt/{{ esxi_hostname }}/* {{ global_path }}/baremetal/{{ esxi_hostname }}/
        # umount /mnt/{{ esxi_hostname }}
        mv {{ global_path }}/baremetal/{{ esxi_hostname }}/boot.cfg {{ global_path }}/baremetal/{{ esxi_hostname }}/boot.cfg.orig
        mv {{ global_path }}/baremetal/{{ esxi_hostname }}/efi/boot/boot.cfg {{ global_path }}/baremetal/{{ esxi_hostname }}/efi/boot/boot.cfg.orig
  
## The following two tasks will make the custom iso bootable by both legacy and UEFI implementations:    
  - name: Copying custom boot.cfg to root directory . . .
    copy:
      src: '{{ global_path }}/files/{{ HW_Vendor }}/{{ esxi_build }}/boot.cfg'
      dest: '{{ global_path }}/baremetal/{{ esxi_hostname }}'
      owner: root
      group: root
      mode: '0744'

  - name: Copying custom UEFI boot.cfg to root efi directory . . .
    copy:
      src: '{{ global_path }}/files/{{ HW_Vendor }}/{{ esxi_build }}/efi/boot/boot.cfg'
      dest: '{{ global_path }}/baremetal/{{ esxi_hostname }}/efi/boot'
      owner: root
      group: root
      mode: '0744'

  # - name: "get root password from MyVault"
  #   # ansible_module_myvault:
  #     # myvault_pathname: 'kv_vps/data/[dws] [all] [prd] [fr] [paris] [vmware] [esx] [root] [host]'
  #     # myvault_user: 'root'
  #   shell: python /usr/share/nginx/html/isos/esxi_deployator_2000/library/ansible_module_myvault_root_esxi.py 
  #   register: esxi_vault_password
  # # - debug: var=esxi_vault_password.resultt
  # - debug: var=esxi_vault_password.stdout

  # - name: "get ipmi password from MyVault"
  #   # ansible_module_myvault:
  #   #   myvault_pathname: 'kv_vps/data/[IDRAC][ILO][RCR][GCR][DWS]ccsrac'
  #   shell: python /usr/share/nginx/html/isos/esxi_deployator_2000/library/ansible_module_myvault_ipmi.py 
  #     # myvault_user: "{{ ipmi_user }}"
  #   register: ipmi_vault_passwd
  # # - debug: var=ipmi_vault_passwd.resultt
  # - debug: var=ipmi_vault_passwd.stdout   


## Additional options can be appened after the "reboot" at the end of the content section, such as scripted esxcli commands, etc.
#         rootpw --iscrypted $1$xKzTKscs$I9tUBiCPB5Pq7HCQ6Tm9H1
  - name: Creating kickstart file with proper automation contents . . .
    copy:
      force: true
      dest: '{{ global_path }}/baremetal/temp/{{ esxi_hostname }}/etc/vmware/weasel/ks.cfg'
      content: |
        vmaccepteula
        clearpart --firstdisk=local --overwritevmfs
        install --firstdisk=local --overwritevmfs
        rootpw {{ esxi_vault_password }}
        network --bootproto=static --addvmportgroup=1 --vlanid={{ vlan_vmKernel }} --ip={{ IP_vmKernel }} --netmask={{ vmKernel_netmask }} --gateway={{ vmKernel_gateway }} --nameserver={{ dns }} --hostname={{ esxi_hostname }}
        reboot

        %firstboot --interpreter=busybox

        vim-cmd hostsvc/enable_ssh
        vim-cmd hostsvc/start_ssh
        vim-cmd hostsvc/enable_esx_shell
        vim-cmd hostsvc/start_esx_shell

        esxcli system ntp set -s dewitt.fr.world.socgen
        esxcli system ntp set -e 1

        esxcli system settings advanced set --option /Net/TcpipHeapSize --int-value=32
        esxcli system settings advanced set --option /Net/TcpipHeapMax --int-value=1536
        esxcli system settings advanced set --option /NFS/MaxVolumes --int-value=256
        esxcli system settings advanced set --option /NFS41/MaxVolumes --int-value=256
        esxcli system settings advanced set --option /NFS/MaxQueueDepth --int-value=128 
        esxcli system settings advanced set --option /NFS/HeartbeatMaxFailures --int-value=10 
        esxcli system settings advanced set --option /NFS/HeartbeatFrequency --int-value=12
        esxcli system settings advanced set --option /NFS/HeartbeatTimeout --int-value=5
        esxcli system settings advanced set --option /VMFS3/HardwareAcceleratedLocking --int-value=1
        esxcli system settings advanced set --option /VMFS3/EnableBlockDelete --int-value=0

        ## High Perf
        esxcli system settings advanced set --option=/Power/CpuPolicy --string-value="static"

        ## ssh key
        wget https://192.175.138.223/id_rsa.pub -O /etc/ssh/keys-root/authorized_keys

        cat > /etc/ntp.conf << _NTP_CONFIG_
        restrict default kod nomodify notrap noquerynopeer
        restrict 127.0.0.1
        server tudor.fr.world.socgen
        server jaeger.fr.world.socgen
        server dewitt.fr.world.socgen
        server rolex.fr.world.socgen
        server tissot.fr.world.socgen
        server longines.fr.world.socgen
        _NTP_CONFIG_
        /sbin/chkconfig ntpd on
        
        esxcli storage nmp satp set --default-psp VMW_PSP_RR --satp  VMW_SATP_DEFAULT_AA  

        esxcli system maintenanceMode set -e true

        ## NFS
        esxcli network vswitch standard portgroup add --portgroup-name=NFS1 --vswitch-name=vSwitch0
        esxcli network ip interface add --interface-name=vmk2 --portgroup-name=NFS1 --mtu=9000
        esxcli network vswitch standard portgroup add --portgroup-name=NFS2 --vswitch-name=vSwitch0
        esxcli network ip interface add --interface-name=vmk3 --portgroup-name=NFS2 --mtu=9000
        esxcli network ip interface ipv4 set --interface-name=vmk2 --ipv4="{{ IP_NFS1 }}" --netmask="{{ NFS1_netmask }}" --type=static
        esxcli network ip interface ipv4 set --interface-name=vmk3 --ipv4="{{ IP_NFS2 }}" --netmask="{{ NFS2_netmask }}" --type=static

  - name: Scripting commands to tarball the kickstart file and make the proper iso . . .
    shell: |
       warn: false
       chmod ugo+x {{ global_path }}/baremetal/temp/{{ esxi_hostname }}/etc/vmware/weasel/ks.cfg
       cd {{ global_path }}/baremetal/temp/{{ esxi_hostname }}
       tar czvf bmks.tgz *
       chmod ugo+x {{ global_path }}/baremetal/temp/{{ esxi_hostname }}/bmks.tgz
       cp {{ global_path }}/baremetal/temp/{{ esxi_hostname }}/bmks.tgz {{ global_path }}/baremetal/{{ esxi_hostname }}/
       cd {{ global_path }}/baremetal/{{ esxi_hostname }}
      
  - name: Creating bootable iso from all files . . .
    shell: >
      mkisofs
      -relaxed-filenames
      -J
      -R
      -b isolinux.bin
      -c boot.cat
      -no-emul-boot
      -boot-load-size 4
      -boot-info-table
      -eltorito-alt-boot
      -e efiboot.img
      -boot-load-size 1
      -no-emul-boot
      -o {{ global_path }}/baremetal/{{ esxi_hostname }}.iso
      {{ global_path }}/baremetal/{{ esxi_hostname }}/

  - name: Moving created iso to webserver . . .
    shell: |
      warn: false
      mv {{ global_path }}/baremetal/{{ esxi_hostname }}.iso {{ global_path }}/iso/

  - name: (DELL) Reset ipmi
    dellemc.openmanage.idrac_reset:
      idrac_ip:  "{{ ipmi_ip }}"
      idrac_user: "{{ ipmi_user }}"
      # idrac_password: "{{ ipmi_vault_passwd.resultt }}"
      idrac_password: "{{ ipmi_vault_passwd }}"
    register: reset_idrac_result
    when: HW_Vendor == 'DELL'

  - name: (HPE) Reset ipmi
    community.general.redfish_command:
      category: Systems
      command: PowerForceRestart
      baseuri: "{{ ipmi_ip }}"
      username: "{{ ipmi_user }}"
      password: "{{ ipmi_vault_passwd }}"
    register: reset_ilo_result
    when: HW_Vendor == 'HPE' 

  - name: Wait for port 443 to become open on the ipmi
    wait_for:
      host: "{{ ipmi_ip }}"
      port: 443
      delay: 30
      connect_timeout: 5
      timeout: 500
    register: wait_443_result
    # when: HW_Vendor == 'DELL'
    failed_when: wait_443_result.elapsed < 20

  - name: (DELL) Get Lifecycle status.
    idrac_lifecycle_controller_status_info:
      idrac_ip:  "{{ ipmi_ip }}"
      idrac_user: "{{ ipmi_user }}"
      idrac_password: "{{ ipmi_vault_passwd }}"
    when: reset_idrac_result.changed and HW_Vendor == 'DELL'
    register: result
    until: result.lc_status_info.Lcstatus == 'Ready' or result.lc_status_info.LcReady is true 
    retries: 10
    delay: 10
    no_log: false

  # - name: (HPE) Get Lifecycle status.
  #   idrac_lifecycle_controller_status_info:
  #     idrac_ip:  "{{ ipmi_ip }}"
  #     idrac_user: "{{ ipmi_user }}"
  #     idrac_password: "{{ ipmi_vault_passwd.resultt }}"
  #   when: reset_ilo_result.changed and HW_Vendor == 'HPE'
  #   register: result
  #   until: result.lc_status_info.Lcstatus == 'Ready' or result.lc_status_info.LcReady is true 
  #   retries: 10
  #   delay: 10
  #   no_log: false

  - name: (DELL) Get Bios settings
    shell: |
      /opt/dell/srvadmin/sbin/racadm -r {{ ipmi_ip }} -u {{ ipmi_user }} -p {{ ipmi_vault_passwd.resultt }} get bios.biosbootsettings
    register: bios_settings
    when: HW_Vendor == 'DELL'

  # - name: (HPE) Get Bios settings
  #   shell: |
  #     /opt/dell/srvadmin/sbin/racadm -r {{ ipmi_ip }} -u {{ ipmi_user }} -p {{ ipmi_vault_passwd.resultt }} get bios.biosbootsettings
  #   register: bios_settings
  #   when: HW_Vendor == 'HPE'  

  - name: (DELL) Configure BootMode to uefi if needed
    shell: |
      /opt/dell/srvadmin/sbin/racadm -r {{ ipmi_ip }} -u {{ ipmi_user }} -p {{ ipmi_vault_passwd.resultt }} set bios.biosbootsettings.BootMode uefi
      /opt/dell/srvadmin/sbin/racadm -r {{ ipmi_ip }} -u {{ ipmi_user }} -p {{ ipmi_vault_passwd.resultt }} jobqueue create BIOS.setup.1-1 -r pwrcycle
    # when: "'BootMode=Uefi' not in bios_settings.stdout_lines and HW_Vendor == 'DELL'"
    when: HW_Vendor == 'DELL'

  
  # - name: (HPE) Configure BootMode to uefi if needed
  #   shell: |
  #     /opt/dell/srvadmin/sbin/racadm -r {{ ipmi_ip }} -u {{ ipmi_user }} -p {{ ipmi_vault_passwd.resultt }} set bios.biosbootsettings.BootMode uefi
  #     /opt/dell/srvadmin/sbin/racadm -r {{ ipmi_ip }} -u {{ ipmi_user }} -p {{ ipmi_vault_passwd.resultt }} jobqueue create BIOS.setup.1-1 -r pwrcycle
  #   when: "'BootMode=Uefi' not in bios_settings.stdout_lines and HW_Vendor == 'HPE'"
  
  - name: Pause for 5 minutes to build app cache
    ansible.builtin.pause:
      minutes: 2

  - name: (DELL) Boot to Network ISO
    shell: |
      /opt/dell/srvadmin/sbin/racadm -r {{ ipmi_ip }} -u {{ ipmi_user }} -p {{ ipmi_vault_passwd.resultt }} remoteimage -c -l https://192.175.138.223/esxi_deployator_2000/iso/{{ esxi_hostname }}.iso
      /opt/dell/srvadmin/sbin/racadm -r {{ ipmi_ip }} -u {{ ipmi_user }} -p {{ ipmi_vault_passwd.resultt }} set iDRAC.VirtualMedia.Bootonce 1
      /opt/dell/srvadmin/sbin/racadm -r {{ ipmi_ip }} -u {{ ipmi_user }} -p {{ ipmi_vault_passwd.resultt }} set idrac.serverBoot.FirstBootDevice VCD-DVD
      /opt/dell/srvadmin/sbin/racadm -r {{ ipmi_ip }} -u {{ ipmi_user }} -p {{ ipmi_vault_passwd.resultt }} serveraction powercycle
    when: HW_Vendor == 'DELL'

  - name: (HPE) Boot to Network ISO
    hpilo_boot:
      host: "{{ ipmi_ip }}"
      login: "{{ ipmi_user }}"
      password: "{{ ipmi_vault_passwd }}"
      media: cdrom
      state: connect
      force: yes
      # image: https://192.175.138.223:443/esxi_deployator_2000/iso/{{ esxi_hostname }}.iso
      image: https://192.88.3.59/BMaaS/iso/VMMESXURTMP001.dns22-3.socgen.iso
    when: HW_Vendor == 'HPE'

  - name: Waiting for custom installation to complete
    wait_for:
      delay: 120
      sleep: 30
      host: "{{ IP_vmKernel }}"
      port: 443
      timeout: 3600
    delegate_to: localhost

  - name: Unmount installation ISO
    shell: | 
      /opt/dell/srvadmin/sbin/racadm -r {{ ipmi_ip }} -u {{ ipmi_user }} -p {{ ipmi_vault_passwd.resultt }} remoteImage -d   
    when: HW_Vendor == 'DELL'

  - name: Boot to Network ISO (HPE)
    hpilo_boot:
      host: "{{ ipmi_ip }}"
      login: "{{ ipmi_user }}"
      password: "{{ ipmi_vault_passwd }}"
      state: disconnect
    when: HW_Vendor == 'HPE'


  # - name: Deleting all related files from staging location and web server
  #   shell: |
  #     warn: false      
  #     rm -rf {{ esxi_hostname }}
  #     rm -rf {{ global_path }}/baremetal/temp/{{ esxi_hostname }}
  #     rm -rf /temp/{{ esxi_hostname }}
  #     rm -f {{ global_path }}/iso/{{ esxi_hostname }}.iso
  #     rm -rf /mnt/{{ esxi_hostname }}
  #   args:
  #     chdir: '{{ global_path }}/baremetal'

  # - name: Sleeping 1 minutes before adding to vc   
  #   pause:
  #     minutes: 1
  
 # - name: Save the ESXi configuration locally by authenticating directly against the ESXi host
 #   vmware_cfg_backup:
 #     src: "/tmp/configBundle-{{ esxi_hostname}}.tgz"
 #     hostname: '{{ esxi_hostname }}'
 #     username: '{{ esxi_username }}'
 #     password: '{{ encrypted_root_password }}'
 #     state: loaded
 #     validate_certs: false
 #   delegate_to: localhost